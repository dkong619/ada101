/*----------------------------------------------------------------------------
 minimum distance using Dijkstra’s algorithm
 ---------------------------------------------------------------------------*/

 import java.util.*;

 public class dijkstras {
 
     private static void dijstra(int graph[][]){
         int v=graph.length;
         boolean visited[]=new boolean[v];
 
         int distance[]=new int[v];
 
         distance[0]=0;
 
         for(int i=1;i<v;i++){
             distance[i]= Integer.MAX_VALUE;
         }
 
         for(int i=0;i<v-1;i++){
             int minvertex = find_min_vertex(distance,visited);
             visited[minvertex]=true;
 
             for(int j=0;j<v;j++){
                 if(graph[minvertex][j] != 0 && !visited[j] && distance[minvertex]!= Integer.MAX_VALUE){
                     int new_distance=distance[minvertex]+graph[minvertex][j];
                     if(new_distance < distance[j]){
                         distance[j]=new_distance;
                     }
                 }
             }
         }

         for(int i=1;i<v;i++){
             System.out.println("vertex no: "+i+" min distance: "+distance[i]);
         }
     }
     private static int find_min_vertex(int[]distance, boolean visited[]){
         int minvertex = -1;
         for(int i=0;i<distance.length;i++){
             if(!visited[i] && (minvertex == -1 || distance[i]< distance[minvertex])){
                 minvertex = i;
             }
         }
         return minvertex;
     }
     
     public static void main(String[] args) {
         Scanner sc=new Scanner(System.in);
         System.out.println("enter the no.of vertices: ");
         int v=sc.nextInt();
         int graph[][]=new int [v][v];
        System.out.println("enter the values of the cost adjancency matrix” );
         for(int i=0;i<graph.length;i++){
             for(int j=0;j<graph.length;j++){
                 graph[i][j]=sc.nextInt();
             }
         }
         dijstra(graph);
         sc.close();
     }
 }
